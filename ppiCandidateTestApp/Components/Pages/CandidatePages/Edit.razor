@page "/candidates/edit"
@using Microsoft.EntityFrameworkCore
@using ppiCandidateTestApp.Models
@inject IDbContextFactory<ppiCandidateTestApp.Data.ppiCandidateTestAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit Contact</h1>

<!-- <h2>Candidate</h2> -->
<hr />
@if (Candidate is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Candidate" OnValidSubmit="UpdateCandidate" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Candidate.Id" value="@Candidate.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">First Name:</label>
                    <InputText id="firstname" @bind-Value="Candidate.Firstname" class="form-control" />
                    <ValidationMessage For="() => Candidate.Firstname" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">Last Name:</label>
                    <InputText id="lastname" @bind-Value="Candidate.Lastname" class="form-control" />
                    <ValidationMessage For="() => Candidate.Lastname" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Phone Number:</label>
                    <InputText id="phone" @bind-Value="Candidate.Phone" class="form-control" />
                    <ValidationMessage For="() => Candidate.Phone" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="zipcode" class="form-label">Zipcode:</label>
                    <InputNumber id="zipcode" @bind-Value="Candidate.zipcode" class="form-control" />
                    <ValidationMessage For="() => Candidate.zipcode" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email Address:</label>
                    <InputText id="email" @bind-Value="Candidate.email" class="form-control" />
                    <ValidationMessage For="() => Candidate.email" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/candidates">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Candidate? Candidate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Candidate ??= await context.Candidate.FirstOrDefaultAsync(m => m.Id == Id);

        if (Candidate is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCandidate()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Candidate!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CandidateExists(Candidate!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/candidates");
    }

    private bool CandidateExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Candidate.Any(e => e.Id == id);
    }
}
